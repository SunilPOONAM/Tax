@model TaxService.Models.User
@using System.Configuration

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
  
}
<style>
    .table-borderless td,
    .table-borderless th {
        border: 0;
    }
</style>
<h2> Admin Details</h2>

<div>
    @*<h4>Customer</h4>*@
    <hr />
    <table class="table table-borderless ">

        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Username)
            </th>

            <td>
                @Html.DisplayFor(model => model.Username)
            </td>
        </tr>
       
    </table>
 
</div>
<div class="col-lg-12">
    <p class="mt-3">
        @Html.ActionLink("Edit", "Edit", new { id = Model.UserID }, new { Class = "btn bg-primary" }) |
        @Html.ActionLink("Back to List", "AdminIndex")
    </p>
    
</div>
<script>
    document.getElementById("copyButton").addEventListener("click", function () {
        copyToClipboard(document.getElementById("copyTarget"));
    });

    function copyToClipboard(elem) {
        // create hidden text element, if it doesn't already exist
        var targetId = "_hiddenCopyText_";
        var isInput = elem.tagName === "INPUT" || elem.tagName === "TEXTAREA";
        var origSelectionStart, origSelectionEnd;
        if (isInput) {
            // can just use the original source element for the selection and copy
            target = elem;
            origSelectionStart = elem.selectionStart;
            origSelectionEnd = elem.selectionEnd;
        } else {
            // must use a temporary form element for the selection and copy
            target = document.getElementById(targetId);
            if (!target) {
                var target = document.createElement("textarea");
                target.style.position = "absolute";
                target.style.left = "-9999px";
                target.style.top = "0";
                target.id = targetId;
                document.body.appendChild(target);
            }
            target.textContent = elem.textContent;
        }
        // select the content
        var currentFocus = document.activeElement;
        target.focus();
        target.setSelectionRange(0, target.value.length);

        // copy the selection
        var succeed;
        try {
            succeed = document.execCommand("copy");
        } catch (e) {
            succeed = false;
        }
        // restore original focus
        if (currentFocus && typeof currentFocus.focus === "function") {
            currentFocus.focus();
        }

        if (isInput) {
            // restore prior selection
            elem.setSelectionRange(origSelectionStart, origSelectionEnd);
        } else {
            // clear temporary content
            target.textContent = "";
        }
        return succeed;
    }
</script>